/*
 * Copyright (c) 2017. Eric Angeli
 *
 *  Permission is hereby granted, free of charge,
 *  to any person obtaining a copy of this software
 *  and associated documentation files (the "Software"),
 *  to deal in the Software without restriction,
 *  including without limitation the rights to use, copy,
 *  modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit
 *  persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *
 *  The above copyright notice and this permission
 *  notice shall be included in all copies or substantial
 *  portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
 *  AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */
import com.thegoate.gradle.GoateDepends;
import org.jetbrains.grammarkit.tasks.*;

plugins {
    id "org.jetbrains.intellij" version "0.3.11"
    id "org.jetbrains.grammarkit" version "2018.2"
}

dependencies{
    GoateDepends d = new GoateDepends(project, "goate", project.javaVersion)
    compile d.depends(":barn", project.internalVersion);
    compile d.depends(":kernel", project.internalVersion);
    compile d.depends(":json", project.internalVersion);
    compile d.depends(":rest", project.internalVersion);
    compile d.depends(":testng", project.internalVersion);
    testCompile d.depends(":restassured", project.internalVersion);
}

task generateBarnLexer(type: GenerateLexer) {
    // source flex file
    source = "src/main/grammar/Barn.flex"

    // target directory for lexer
    targetDir = "src/main/java/com/thegoate/barn/idea/plugin/"

    // target classname, target file will be targetDir/targetClass.java
    targetClass = "BarnLexerGenerated"

    // optional, path to the task-specific skeleton file. Default: none
    skeleton = 'idea-flex.skeleton'

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}
task generateBarnParser(type: GenerateParser) {
    // source bnf file
    source = "src/main/grammar/Barn.bnf"

    // optional, task-specific root for the generated files. Default: none
    targetRoot = 'src/main/java'

    // path to a parser file, relative to the targetRoot
    pathToParser = '/com/thegoate/barn/idea/plugin/generated/parser/BarnParser.java'

    // path to a directory with generated psi files, relative to the targetRoot
    pathToPsiRoot = '/com/thegoate/barn/idea/plugin/generated/psi'

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = false
}